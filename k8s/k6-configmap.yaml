apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-test
  namespace: books
data:
  test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export let options = {
      scenarios: {
        constant_load: {
          executor: 'constant-arrival-rate',
          rate: 2,
          timeUnit: '1s',
          duration: '1m',
          preAllocatedVUs: 5,
          maxVUs: 10,
        },
      },
    };

    const BASE_URL = 'http://bookapi.books.svc.cluster.local';

    const testBook = {
      title: 'Test Book',
      author: 'Test Author',
      year: 2025
    };

    export default function() {
      // GET all books (40%)
      if (Math.random() < 0.4) {
        const getAll = http.get(`${BASE_URL}/books`);
        check(getAll, {
          'get all books status is 200': (r) => r.status === 200,
        });
      }
      // POST new book (30%)
      else if (Math.random() < 0.7) {
        const create = http.post(`${BASE_URL}/books`, JSON.stringify(testBook), {
          headers: { 'Content-Type': 'application/json' },
        });
        check(create, {
          'create book status is 201': (r) => r.status === 201,
        });

        if (create.status === 201) {
          const bookId = JSON.parse(create.body).id;
          const getOne = http.get(`${BASE_URL}/books/${bookId}`);
          check(getOne, {
            'get single book status is 200': (r) => r.status === 200,
          });
        }
      }
      // PUT update book (30%)
      else {
        const updatedBook = Object.assign({}, testBook, {
          title: `Updated Book ${Date.now()}`
        });
        const update = http.put(`${BASE_URL}/books/1`, JSON.stringify(updatedBook), {
          headers: { 'Content-Type': 'application/json' },
        });
        check(update, {
          'update book status is 200': (r) => r.status === 200,
        });
      }

      sleep(Math.random() * 0.1);
    }